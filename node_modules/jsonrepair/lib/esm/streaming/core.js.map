{"version":3,"file":"core.js","names":["JSONRepairError","codeAsterisk","codeBackslash","codeCloseParenthesis","codeClosingBrace","codeClosingBracket","codeColon","codeComma","codeDot","codeDoubleQuote","codeLowercaseE","codeMinus","codeNewline","codeOpenParenthesis","codeOpeningBrace","codeOpeningBracket","codePlus","codeSemicolon","codeSlash","codeUppercaseE","isControlCharacter","isDelimiter","isDigit","isDoubleQuote","isDoubleQuoteLike","isHex","isQuote","isSingleQuote","isSingleQuoteLike","isSpecialWhitespace","isStartOfValue","isUnquotedStringDelimiter","isValidStringCharacter","isWhitespace","regexFunctionNameChar","regexFunctionNameCharStart","regexUrlChar","regexUrlStart","createInputBuffer","createOutputBuffer","Caret","StackType","createStack","controlCharacters","escapeCharacters","b","f","n","r","t","jsonrepairCore","_ref","onData","bufferSize","chunkSize","input","output","write","i","iFlushed","stack","flushInputBuffer","flush","transform","chunk","push","currentLength","parse","close","parseWhitespaceAndSkipComments","type","object","caret","beforeKey","skipEllipsis","parseObjectKey","parseUnexpectedColon","parseRepairTrailingComma","parseRepairObjectEndOrComma","beforeValue","parseValue","parseRepairMissingObjectValue","afterValue","parseObjectComma","parseObjectEnd","array","parseRepairArrayEnd","parseArrayComma","parseArrayEnd","parseRepairMissingComma","ndJson","parseRepairNdJsonEnd","functionCall","parseFunctionCallEnd","root","parseUnexpectedEnd","parseRootEnd","parseObjectStart","parseArrayStart","parseString","parseNumber","parseKeywords","parseRepairUnquotedString","parseRepairRegex","parseCharacter","skipCharacter","update","j","test","charAt","isEnd","k","charCodeAt","findNextDelimiter","substring","symbol","JSON","stringify","start","endsWithIgnoringWhitespace","stripLastOccurrence","throwObjectKeyExpected","throwUnexpectedEnd","throwUnexpectedCharacter","parsedKey","parseUnquotedKey","truncatedText","insertBeforeLastWhitespace","throwColonExpected","pop","parsedComma","unshift","changed","parseWhitespace","parseComment","whitespace","normal","length","atEndOfBlockComment","code","skipEscapeCharacter","stopAtDelimiter","arguments","undefined","skipEscapeChars","isEndQuote","iBefore","oBefore","iPrev","prevNonWhitespaceIndex","remove","iQuote","oQuote","parseConcatenatedString","insertAt","char","escapeChar","throwInvalidUnicodeCharacter","throwInvalidCharacter","parsed","parsedStr","atEndOfNumber","repairNumberEndingWithNumericSymbol","num","hasInvalidLeadingZero","parseKeyword","name","value","end","isKey","prev","chars"],"sources":["../../../src/streaming/core.ts"],"sourcesContent":["import { JSONRepairError } from '../utils/JSONRepairError.js'\nimport {\n  codeAsterisk,\n  codeBackslash,\n  codeCloseParenthesis,\n  codeClosingBrace,\n  codeClosingBracket,\n  codeColon,\n  codeComma,\n  codeDot,\n  codeDoubleQuote,\n  codeLowercaseE,\n  codeMinus,\n  codeNewline,\n  codeOpenParenthesis,\n  codeOpeningBrace,\n  codeOpeningBracket,\n  codePlus,\n  codeSemicolon,\n  codeSlash,\n  codeUppercaseE,\n  isControlCharacter,\n  isDelimiter,\n  isDigit,\n  isDoubleQuote,\n  isDoubleQuoteLike,\n  isHex,\n  isQuote,\n  isSingleQuote,\n  isSingleQuoteLike,\n  isSpecialWhitespace,\n  isStartOfValue,\n  isUnquotedStringDelimiter,\n  isValidStringCharacter,\n  isWhitespace,\n  regexFunctionNameChar,\n  regexFunctionNameCharStart,\n  regexUrlChar,\n  regexUrlStart\n} from '../utils/stringUtils.js'\nimport { createInputBuffer } from './buffer/InputBuffer.js'\nimport { createOutputBuffer } from './buffer/OutputBuffer.js'\nimport { Caret, StackType, createStack } from './stack.js'\n\nconst controlCharacters: { [key: string]: string } = {\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t'\n}\n\n// map with all escape characters\nconst escapeCharacters: { [key: string]: string } = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n}\n\nexport interface JsonRepairCoreOptions {\n  onData: (chunk: string) => void\n  chunkSize?: number\n  bufferSize?: number\n}\n\nexport interface JsonRepairCore {\n  transform: (chunk: string) => void\n  flush: () => void\n}\n\nexport function jsonrepairCore({\n  onData,\n  bufferSize = 65536,\n  chunkSize = 65536\n}: JsonRepairCoreOptions): JsonRepairCore {\n  const input = createInputBuffer()\n\n  const output = createOutputBuffer({\n    write: onData,\n    bufferSize,\n    chunkSize\n  })\n\n  let i = 0\n  let iFlushed = 0\n  const stack = createStack()\n\n  function flushInputBuffer() {\n    while (iFlushed < i - bufferSize - chunkSize) {\n      iFlushed += chunkSize\n      input.flush(iFlushed)\n    }\n  }\n\n  function transform(chunk: string) {\n    input.push(chunk)\n\n    while (i < input.currentLength() - bufferSize && parse()) {\n      // loop until there is nothing more to process\n    }\n\n    flushInputBuffer()\n  }\n\n  function flush() {\n    input.close()\n\n    while (parse()) {\n      // loop until there is nothing more to process\n    }\n\n    output.flush()\n  }\n\n  function parse(): boolean {\n    parseWhitespaceAndSkipComments()\n\n    switch (stack.type) {\n      case StackType.object: {\n        switch (stack.caret) {\n          case Caret.beforeKey:\n            return (\n              skipEllipsis() ||\n              parseObjectKey() ||\n              parseUnexpectedColon() ||\n              parseRepairTrailingComma() ||\n              parseRepairObjectEndOrComma()\n            )\n          case Caret.beforeValue:\n            return parseValue() || parseRepairMissingObjectValue()\n          case Caret.afterValue:\n            return parseObjectComma() || parseObjectEnd() || parseRepairObjectEndOrComma()\n          default:\n            return false\n        }\n      }\n\n      case StackType.array: {\n        switch (stack.caret) {\n          case Caret.beforeValue:\n            return (\n              skipEllipsis() || parseValue() || parseRepairTrailingComma() || parseRepairArrayEnd()\n            )\n          case Caret.afterValue:\n            return (\n              parseArrayComma() ||\n              parseArrayEnd() ||\n              parseRepairMissingComma() ||\n              parseRepairArrayEnd()\n            )\n          default:\n            return false\n        }\n      }\n\n      case StackType.ndJson: {\n        switch (stack.caret) {\n          case Caret.beforeValue:\n            return parseValue() || parseRepairTrailingComma()\n          case Caret.afterValue:\n            return parseArrayComma() || parseRepairMissingComma() || parseRepairNdJsonEnd()\n          default:\n            return false\n        }\n      }\n\n      case StackType.functionCall: {\n        switch (stack.caret) {\n          case Caret.beforeValue:\n            return parseValue()\n          case Caret.afterValue:\n            return parseFunctionCallEnd()\n          default:\n            return false\n        }\n      }\n\n      case StackType.root: {\n        switch (stack.caret) {\n          case Caret.beforeValue:\n            return parseValue() || parseUnexpectedEnd()\n          case Caret.afterValue:\n            return parseRootEnd()\n          default:\n            return false\n        }\n      }\n\n      default:\n        return false\n    }\n  }\n\n  function parseValue(): boolean {\n    return (\n      parseObjectStart() ||\n      parseArrayStart() ||\n      parseString() ||\n      parseNumber() ||\n      parseKeywords() ||\n      parseRepairUnquotedString() ||\n      parseRepairRegex()\n    )\n  }\n\n  function parseObjectStart(): boolean {\n    if (parseCharacter(codeOpeningBrace)) {\n      parseWhitespaceAndSkipComments()\n\n      skipEllipsis()\n\n      if (skipCharacter(codeComma)) {\n        parseWhitespaceAndSkipComments()\n      }\n\n      if (parseCharacter(codeClosingBrace)) {\n        return stack.update(Caret.afterValue)\n      }\n\n      return stack.push(StackType.object, Caret.beforeKey)\n    }\n\n    return false\n  }\n\n  function parseArrayStart(): boolean {\n    if (parseCharacter(codeOpeningBracket)) {\n      parseWhitespaceAndSkipComments()\n\n      skipEllipsis()\n\n      if (skipCharacter(codeComma)) {\n        parseWhitespaceAndSkipComments()\n      }\n\n      if (parseCharacter(codeClosingBracket)) {\n        return stack.update(Caret.afterValue)\n      }\n\n      return stack.push(StackType.array, Caret.beforeValue)\n    }\n\n    return false\n  }\n\n  function parseRepairUnquotedString(): boolean {\n    let j = i\n\n    if (regexFunctionNameCharStart.test(input.charAt(j))) {\n      while (!input.isEnd(j) && regexFunctionNameChar.test(input.charAt(j))) {\n        j++\n      }\n\n      let k = j\n      while (isWhitespace(input.charCodeAt(k))) {\n        k++\n      }\n\n      if (input.charCodeAt(k) === codeOpenParenthesis) {\n        // repair a MongoDB function call like NumberLong(\"2\")\n        // repair a JSONP function call like callback({...});\n        k++\n        i = k\n        return stack.push(StackType.functionCall, Caret.beforeValue)\n      }\n    }\n\n    j = findNextDelimiter(false, j)\n    if (j !== null) {\n      // test start of an url like \"https://...\" (this would be parsed as a comment)\n      if (input.charCodeAt(j - 1) === codeColon && regexUrlStart.test(input.substring(i, j + 2))) {\n        while (!input.isEnd(j) && regexUrlChar.test(input.charAt(j))) {\n          j++\n        }\n      }\n\n      const symbol = input.substring(i, j)\n      i = j\n\n      output.push(symbol === 'undefined' ? 'null' : JSON.stringify(symbol))\n\n      if (input.charCodeAt(i) === codeDoubleQuote) {\n        // we had a missing start quote, but now we encountered the end quote, so we can skip that one\n        i++\n      }\n\n      return stack.update(Caret.afterValue)\n    }\n\n    return false\n  }\n\n  function parseRepairRegex() {\n    if (input.charAt(i) === '/') {\n      const start = i\n      i++\n\n      while (!input.isEnd(i) && (input.charAt(i) !== '/' || input.charAt(i - 1) === '\\\\')) {\n        i++\n      }\n      i++\n\n      output.push(`\"${input.substring(start, i)}\"`)\n\n      return stack.update(Caret.afterValue)\n    }\n  }\n\n  function parseRepairMissingObjectValue(): boolean {\n    // repair missing object value\n    output.push('null')\n    return stack.update(Caret.afterValue)\n  }\n\n  function parseRepairTrailingComma(): boolean {\n    // repair trailing comma\n    if (output.endsWithIgnoringWhitespace(',')) {\n      output.stripLastOccurrence(',')\n      return stack.update(Caret.afterValue)\n    }\n\n    return false\n  }\n\n  function parseUnexpectedColon(): boolean {\n    if (input.charCodeAt(i) === codeColon) {\n      throwObjectKeyExpected()\n    }\n\n    return false\n  }\n\n  function parseUnexpectedEnd(): boolean {\n    if (input.isEnd(i)) {\n      throwUnexpectedEnd()\n    } else {\n      throwUnexpectedCharacter()\n    }\n\n    return false\n  }\n\n  function parseObjectKey(): boolean {\n    const parsedKey = parseString() || parseUnquotedKey()\n    if (parsedKey) {\n      parseWhitespaceAndSkipComments()\n\n      if (parseCharacter(codeColon)) {\n        // expect a value after the :\n        return stack.update(Caret.beforeValue)\n      }\n\n      const truncatedText = input.isEnd(i)\n      if (isStartOfValue(input.charAt(i)) || truncatedText) {\n        // repair missing colon\n        output.insertBeforeLastWhitespace(':')\n        return stack.update(Caret.beforeValue)\n      }\n\n      throwColonExpected()\n    }\n\n    return false\n  }\n\n  function parseObjectComma(): boolean {\n    if (parseCharacter(codeComma)) {\n      return stack.update(Caret.beforeKey)\n    }\n\n    return false\n  }\n\n  function parseObjectEnd(): boolean {\n    if (parseCharacter(codeClosingBrace)) {\n      return stack.pop()\n    }\n\n    return false\n  }\n\n  function parseRepairObjectEndOrComma(): true {\n    // repair missing object end and trailing comma\n    if (input.charAt(i) === '{') {\n      output.stripLastOccurrence(',')\n      output.insertBeforeLastWhitespace('}')\n      return stack.pop()\n    }\n\n    // repair missing comma\n    if (!input.isEnd(i) && isStartOfValue(input.charAt(i))) {\n      output.insertBeforeLastWhitespace(',')\n      return stack.update(Caret.beforeKey)\n    }\n\n    // repair missing closing brace\n    output.insertBeforeLastWhitespace('}')\n    return stack.pop()\n  }\n\n  function parseArrayComma(): boolean {\n    if (parseCharacter(codeComma)) {\n      return stack.update(Caret.beforeValue)\n    }\n\n    return false\n  }\n\n  function parseArrayEnd(): boolean {\n    if (parseCharacter(codeClosingBracket)) {\n      return stack.pop()\n    }\n\n    return false\n  }\n\n  function parseRepairMissingComma(): boolean {\n    // repair missing comma\n    if (!input.isEnd(i) && isStartOfValue(input.charAt(i))) {\n      output.insertBeforeLastWhitespace(',')\n      return stack.update(Caret.beforeValue)\n    }\n\n    return false\n  }\n\n  function parseRepairArrayEnd(): true {\n    // repair missing closing bracket\n    output.insertBeforeLastWhitespace(']')\n    return stack.pop()\n  }\n\n  function parseRepairNdJsonEnd(): boolean {\n    if (input.isEnd(i)) {\n      output.push('\\n]')\n      return stack.pop()\n    }\n\n    throwUnexpectedEnd()\n    return false // just to make TS happy\n  }\n\n  function parseFunctionCallEnd(): true {\n    if (skipCharacter(codeCloseParenthesis)) {\n      skipCharacter(codeSemicolon)\n    }\n\n    return stack.pop()\n  }\n\n  function parseRootEnd(): boolean {\n    const parsedComma = parseCharacter(codeComma)\n    parseWhitespaceAndSkipComments()\n\n    if (\n      isStartOfValue(input.charAt(i)) &&\n      (output.endsWithIgnoringWhitespace(',') || output.endsWithIgnoringWhitespace('\\n'))\n    ) {\n      // start of a new value after end of the root level object: looks like\n      // newline delimited JSON -> turn into a root level array\n      if (!parsedComma) {\n        // repair missing comma\n        output.insertBeforeLastWhitespace(',')\n      }\n\n      output.unshift('[\\n')\n\n      return stack.push(StackType.ndJson, Caret.beforeValue)\n    }\n\n    if (parsedComma) {\n      // repair: remove trailing comma\n      output.stripLastOccurrence(',')\n\n      return stack.update(Caret.afterValue)\n    }\n\n    // repair redundant end braces and brackets\n    while (input.charCodeAt(i) === codeClosingBrace || input.charCodeAt(i) === codeClosingBracket) {\n      i++\n      parseWhitespaceAndSkipComments()\n    }\n\n    if (!input.isEnd(i)) {\n      throwUnexpectedCharacter()\n    }\n\n    return false\n  }\n\n  function parseWhitespaceAndSkipComments(): boolean {\n    const start = i\n\n    let changed = parseWhitespace()\n    do {\n      changed = parseComment()\n      if (changed) {\n        changed = parseWhitespace()\n      }\n    } while (changed)\n\n    return i > start\n  }\n\n  function parseWhitespace(): boolean {\n    let whitespace = ''\n    let normal: boolean\n    while (\n      // biome-ignore lint/suspicious/noAssignInExpressions: <explanation>\n      (normal = isWhitespace(input.charCodeAt(i))) ||\n      isSpecialWhitespace(input.charCodeAt(i))\n    ) {\n      if (normal) {\n        whitespace += input.charAt(i)\n      } else {\n        // repair special whitespace\n        whitespace += ' '\n      }\n\n      i++\n    }\n\n    if (whitespace.length > 0) {\n      output.push(whitespace)\n      return true\n    }\n\n    return false\n  }\n\n  function parseComment(): boolean {\n    // find a block comment '/* ... */'\n    if (input.charCodeAt(i) === codeSlash && input.charCodeAt(i + 1) === codeAsterisk) {\n      // repair block comment by skipping it\n      while (!input.isEnd(i) && !atEndOfBlockComment(i)) {\n        i++\n      }\n      i += 2\n\n      return true\n    }\n\n    // find a line comment '// ...'\n    if (input.charCodeAt(i) === codeSlash && input.charCodeAt(i + 1) === codeSlash) {\n      // repair line comment by skipping it\n      while (!input.isEnd(i) && input.charCodeAt(i) !== codeNewline) {\n        i++\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  function parseCharacter(code: number): boolean {\n    if (input.charCodeAt(i) === code) {\n      output.push(input.charAt(i))\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipCharacter(code: number): boolean {\n    if (input.charCodeAt(i) === code) {\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipEscapeCharacter(): boolean {\n    return skipCharacter(codeBackslash)\n  }\n\n  /**\n   * Skip ellipsis like \"[1,2,3,...]\" or \"[1,2,3,...,9]\" or \"[...,7,8,9]\"\n   * or a similar construct in objects.\n   */\n  function skipEllipsis(): boolean {\n    parseWhitespaceAndSkipComments()\n\n    if (\n      input.charCodeAt(i) === codeDot &&\n      input.charCodeAt(i + 1) === codeDot &&\n      input.charCodeAt(i + 2) === codeDot\n    ) {\n      // repair: remove the ellipsis (three dots) and optionally a comma\n      i += 3\n      parseWhitespaceAndSkipComments()\n      skipCharacter(codeComma)\n\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Parse a string enclosed by double quotes \"...\". Can contain escaped quotes\n   * Repair strings enclosed in single quotes or special quotes\n   * Repair an escaped string\n   *\n   * The function can run in two stages:\n   * - First, it assumes the string has a valid end quote\n   * - If it turns out that the string does not have a valid end quote followed\n   *   by a delimiter (which should be the case), the function runs again in a\n   *   more conservative way, stopping the string at the first next delimiter\n   *   and fixing the string by inserting a quote there.\n   */\n  function parseString(stopAtDelimiter = false): boolean {\n    let skipEscapeChars = input.charCodeAt(i) === codeBackslash\n    if (skipEscapeChars) {\n      // repair: remove the first escape character\n      i++\n      skipEscapeChars = true\n    }\n\n    if (isQuote(input.charCodeAt(i))) {\n      // double quotes are correct JSON,\n      // single quotes come from JavaScript for example, we assume it will have a correct single end quote too\n      // otherwise, we will match any double-quote-like start with a double-quote-like end,\n      // or any single-quote-like start with a single-quote-like end\n      const isEndQuote = isDoubleQuote(input.charCodeAt(i))\n        ? isDoubleQuote\n        : isSingleQuote(input.charCodeAt(i))\n          ? isSingleQuote\n          : isSingleQuoteLike(input.charCodeAt(i))\n            ? isSingleQuoteLike\n            : isDoubleQuoteLike\n\n      const iBefore = i\n      const oBefore = output.length()\n\n      output.push('\"')\n      i++\n\n      while (true) {\n        if (input.isEnd(i)) {\n          // end of text, we have a missing quote somewhere\n\n          const iPrev = prevNonWhitespaceIndex(i - 1)\n          if (!stopAtDelimiter && isDelimiter(input.charAt(iPrev))) {\n            // if the text ends with a delimiter, like [\"hello],\n            // so the missing end quote should be inserted before this delimiter\n            // retry parsing the string, stopping at the first next delimiter\n            i = iBefore\n            output.remove(oBefore)\n\n            return parseString(true)\n          }\n\n          // repair missing quote\n          output.insertBeforeLastWhitespace('\"')\n\n          return stack.update(Caret.afterValue)\n          // biome-ignore lint/style/noUselessElse: <explanation>\n        } else if (isEndQuote(input.charCodeAt(i))) {\n          // end quote\n          // let us check what is before and after the quote to verify whether this is a legit end quote\n          const iQuote = i\n          const oQuote = output.length()\n          output.push('\"')\n          i++\n\n          parseWhitespaceAndSkipComments()\n\n          if (\n            stopAtDelimiter ||\n            input.isEnd(i) ||\n            isDelimiter(input.charAt(i)) ||\n            isQuote(input.charCodeAt(i)) ||\n            isDigit(input.charCodeAt(i))\n          ) {\n            // The quote is followed by the end of the text, a delimiter, or a next value\n            // so the quote is indeed the end of the string\n            parseConcatenatedString()\n\n            return stack.update(Caret.afterValue)\n          }\n\n          if (isDelimiter(input.charAt(prevNonWhitespaceIndex(iQuote - 1)))) {\n            // This is not the right end quote: it is preceded by a delimiter,\n            // and NOT followed by a delimiter. So, there is an end quote missing\n            // parse the string again and then stop at the first next delimiter\n            i = iBefore\n            output.remove(oBefore)\n\n            return parseString(true)\n          }\n\n          // revert to right after the quote but before any whitespace, and continue parsing the string\n          output.remove(oQuote + 1)\n          i = iQuote + 1\n\n          // repair unescaped quote\n          output.insertAt(oQuote, '\\\\')\n        } else if (stopAtDelimiter && isUnquotedStringDelimiter(input.charAt(i))) {\n          // we're in the mode to stop the string at the first delimiter\n          // because there is an end quote missing\n\n          // test start of an url like \"https://...\" (this would be parsed as a comment)\n          if (\n            input.charCodeAt(i - 1) === codeColon &&\n            regexUrlStart.test(input.substring(iBefore + 1, i + 2))\n          ) {\n            while (!input.isEnd(i) && regexUrlChar.test(input.charAt(i))) {\n              output.push(input.charAt(i))\n              i++\n            }\n          }\n\n          // repair missing quote\n          output.insertBeforeLastWhitespace('\"')\n\n          parseConcatenatedString()\n\n          return stack.update(Caret.afterValue)\n        } else if (input.charCodeAt(i) === codeBackslash) {\n          // handle escaped content like \\n or \\u2605\n          const char = input.charAt(i + 1)\n          const escapeChar = escapeCharacters[char]\n          if (escapeChar !== undefined) {\n            output.push(input.substring(i, i + 2))\n            i += 2\n          } else if (char === 'u') {\n            let j = 2\n            while (j < 6 && isHex(input.charCodeAt(i + j))) {\n              j++\n            }\n\n            if (j === 6) {\n              output.push(input.substring(i, i + 6))\n              i += 6\n            } else if (input.isEnd(i + j)) {\n              // repair invalid or truncated unicode char at the end of the text\n              // by removing the unicode char and ending the string here\n              i += j\n            } else {\n              throwInvalidUnicodeCharacter()\n            }\n          } else {\n            // repair invalid escape character: remove it\n            output.push(char)\n            i += 2\n          }\n        } else {\n          // handle regular characters\n          const char = input.charAt(i)\n          const code = char.charCodeAt(0)\n\n          if (code === codeDoubleQuote && input.charCodeAt(i - 1) !== codeBackslash) {\n            // repair unescaped double quote\n            output.push(`\\\\${char}`)\n            i++\n          } else if (isControlCharacter(code)) {\n            // unescaped control character\n            output.push(controlCharacters[char])\n            i++\n          } else {\n            if (!isValidStringCharacter(code)) {\n              throwInvalidCharacter(char)\n            }\n            output.push(char)\n            i++\n          }\n        }\n\n        if (skipEscapeChars) {\n          // repair: skipped escape character (nothing to do)\n          skipEscapeCharacter()\n        }\n      }\n    }\n\n    return false\n  }\n\n  /**\n   * Repair concatenated strings like \"hello\" + \"world\", change this into \"helloworld\"\n   */\n  function parseConcatenatedString(): boolean {\n    let parsed = false\n\n    parseWhitespaceAndSkipComments()\n    while (input.charCodeAt(i) === codePlus) {\n      parsed = true\n      i++\n      parseWhitespaceAndSkipComments()\n\n      // repair: remove the end quote of the first string\n      output.stripLastOccurrence('\"', true)\n      const start = output.length()\n      const parsedStr = parseString()\n      if (parsedStr) {\n        // repair: remove the start quote of the second string\n        output.remove(start, start + 1)\n      } else {\n        // repair: remove the + because it is not followed by a string\n        output.insertBeforeLastWhitespace('\"')\n      }\n    }\n\n    return parsed\n  }\n\n  /**\n   * Parse a number like 2.4 or 2.4e6\n   */\n  function parseNumber(): boolean {\n    const start = i\n    if (input.charCodeAt(i) === codeMinus) {\n      i++\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return stack.update(Caret.afterValue)\n      }\n      if (!isDigit(input.charCodeAt(i))) {\n        i = start\n        return false\n      }\n    }\n\n    // Note that in JSON leading zeros like \"00789\" are not allowed.\n    // We will allow all leading zeros here though and at the end of parseNumber\n    // check against trailing zeros and repair that if needed.\n    // Leading zeros can have meaning, so we should not clear them.\n    while (isDigit(input.charCodeAt(i))) {\n      i++\n    }\n\n    if (input.charCodeAt(i) === codeDot) {\n      i++\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return stack.update(Caret.afterValue)\n      }\n      if (!isDigit(input.charCodeAt(i))) {\n        i = start\n        return false\n      }\n      while (isDigit(input.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (input.charCodeAt(i) === codeLowercaseE || input.charCodeAt(i) === codeUppercaseE) {\n      i++\n      if (input.charCodeAt(i) === codeMinus || input.charCodeAt(i) === codePlus) {\n        i++\n      }\n      if (atEndOfNumber()) {\n        repairNumberEndingWithNumericSymbol(start)\n        return stack.update(Caret.afterValue)\n      }\n      if (!isDigit(input.charCodeAt(i))) {\n        i = start\n        return false\n      }\n      while (isDigit(input.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    // if we're not at the end of the number by this point, allow this to be parsed as another type\n    if (!atEndOfNumber()) {\n      i = start\n      return false\n    }\n\n    if (i > start) {\n      // repair a number with leading zeros like \"00789\"\n      const num = input.substring(start, i)\n      const hasInvalidLeadingZero = /^0\\d/.test(num)\n\n      output.push(hasInvalidLeadingZero ? `\"${num}\"` : num)\n      return stack.update(Caret.afterValue)\n    }\n\n    return false\n  }\n\n  /**\n   * Parse keywords true, false, null\n   * Repair Python keywords True, False, None\n   */\n  function parseKeywords(): boolean {\n    return (\n      parseKeyword('true', 'true') ||\n      parseKeyword('false', 'false') ||\n      parseKeyword('null', 'null') ||\n      // repair Python keywords True, False, None\n      parseKeyword('True', 'true') ||\n      parseKeyword('False', 'false') ||\n      parseKeyword('None', 'null')\n    )\n  }\n\n  function parseKeyword(name: string, value: string): boolean {\n    if (input.substring(i, i + name.length) === name) {\n      output.push(value)\n      i += name.length\n      return stack.update(Caret.afterValue)\n    }\n\n    return false\n  }\n\n  function parseUnquotedKey(): boolean {\n    let end = findNextDelimiter(true, i)\n\n    if (end !== null) {\n      // first, go back to prevent getting trailing whitespaces in the string\n      while (isWhitespace(input.charCodeAt(end - 1)) && end > i) {\n        end--\n      }\n\n      const symbol = input.substring(i, end)\n      output.push(JSON.stringify(symbol))\n      i = end\n\n      if (input.charCodeAt(i) === codeDoubleQuote) {\n        // we had a missing start quote, but now we encountered the end quote, so we can skip that one\n        i++\n      }\n\n      return stack.update(Caret.afterValue) // we do not have a state Caret.afterKey, therefore we use afterValue here\n    }\n\n    return false\n  }\n\n  function findNextDelimiter(isKey: boolean, start: number): number | null {\n    // note that the symbol can end with whitespaces: we stop at the next delimiter\n    // also, note that we allow strings to contain a slash / in order to support repairing regular expressions\n    let j = start\n    while (\n      !input.isEnd(j) &&\n      !isUnquotedStringDelimiter(input.charAt(j)) &&\n      !isQuote(input.charCodeAt(j)) &&\n      (!isKey || input.charCodeAt(j) !== codeColon)\n    ) {\n      j++\n    }\n\n    return j > i ? j : null\n  }\n\n  function prevNonWhitespaceIndex(start: number): number {\n    let prev = start\n\n    while (prev > 0 && isWhitespace(input.charCodeAt(prev))) {\n      prev--\n    }\n\n    return prev\n  }\n\n  function atEndOfNumber() {\n    return input.isEnd(i) || isDelimiter(input.charAt(i)) || isWhitespace(input.charCodeAt(i))\n  }\n\n  function repairNumberEndingWithNumericSymbol(start: number) {\n    // repair numbers cut off at the end\n    // this will only be called when we end after a '.', '-', or 'e' and does not\n    // change the number more than it needs to make it valid JSON\n    output.push(`${input.substring(start, i)}0`)\n  }\n\n  function throwInvalidCharacter(char: string) {\n    throw new JSONRepairError(`Invalid character ${JSON.stringify(char)}`, i)\n  }\n\n  function throwUnexpectedCharacter() {\n    throw new JSONRepairError(`Unexpected character ${JSON.stringify(input.charAt(i))}`, i)\n  }\n\n  function throwUnexpectedEnd() {\n    throw new JSONRepairError('Unexpected end of json string', i)\n  }\n\n  function throwObjectKeyExpected() {\n    throw new JSONRepairError('Object key expected', i)\n  }\n\n  function throwColonExpected() {\n    throw new JSONRepairError('Colon expected', i)\n  }\n\n  function throwInvalidUnicodeCharacter() {\n    const chars = input.substring(i, i + 6)\n    throw new JSONRepairError(`Invalid unicode character \"${chars}\"`, i)\n  }\n\n  function atEndOfBlockComment(i: number) {\n    return input.charAt(i) === '*' && input.charAt(i + 1) === '/'\n  }\n\n  return {\n    transform,\n    flush\n  }\n}\n"],"mappings":"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","ignoreList":[]}